/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

/**
 * Lean version of AccountabilityPartnershipDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `AccountabilityPartnershipDocument.toObject()`. To avoid conflicts with model names, use the type alias `AccountabilityPartnershipObject`.
 * ```
 * const accountabilitypartnershipObject = accountabilitypartnership.toObject();
 * ```
 */
export type AccountabilityPartnership = {
  user1: User["_id"] | User
  user2: User["_id"] | User
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of AchievementDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `AchievementDocument.toObject()`. To avoid conflicts with model names, use the type alias `AchievementObject`.
 * ```
 * const achievementObject = achievement.toObject();
 * ```
 */
export type Achievement = {
  name: string
  description: string
  requirements: number
  badgeUrl?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of ActivityDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ActivityDocument.toObject()`. To avoid conflicts with model names, use the type alias `ActivityObject`.
 * ```
 * const activityObject = activity.toObject();
 * ```
 */
export type Activity = {
  user: User["_id"] | User
  type:
    | "goal"
    | "reminder"
    | "post"
    | "message"
    | "login"
    | "logout"
    | "signup"
    | "friend_request"
    | "friend_accept"
    | "comment"
    | "reaction"
    | "achievement"
  description: string
  metadata?: any
  participants: (User["_id"] | User)[]
  isDeleted?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of AdminActionLogDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `AdminActionLogDocument.toObject()`. To avoid conflicts with model names, use the type alias `AdminActionLogObject`.
 * ```
 * const adminactionlogObject = adminactionlog.toObject();
 * ```
 */
export type AdminActionLog = {
  admin: User["_id"] | User
  action:
    | "create_user"
    | "delete_user"
    | "update_user_role"
    | "suspend_user"
    | "create_goal"
    | "delete_goal"
    | "modify_subscription"
    | "view_reports"
    | "other"
  description?: string
  target?: User["_id"] | User | null
  details?: Map<string, string>
  ipAddress?: string
  _id: string
  createdAt?: string
  updatedAt?: string
  actionType: string
}

/**
 * Lean version of AnonymousMilitaryMessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `AnonymousMilitaryMessageDocument.toObject()`. To avoid conflicts with model names, use the type alias `AnonymousMilitaryMessageObject`.
 * ```
 * const anonymousmilitarymessageObject = anonymousmilitarymessage.toObject();
 * ```
 */
export type AnonymousMilitaryMessage = {
  room: "veterans-support" | "active-duty" | "family-members"
  anonymousSessionId: string
  displayName: string
  message: string
  isFlagged?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of AnonymousSessionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `AnonymousSessionDocument.toObject()`. To avoid conflicts with model names, use the type alias `AnonymousSessionObject`.
 * ```
 * const anonymoussessionObject = anonymoussession.toObject();
 * ```
 */
export type AnonymousSession = {
  sessionId: string
  displayName: string
  room: "veterans-support" | "active-duty" | "family-members"
  lastActive?: string
  joinedAt?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of AnonymousMoodCheckInDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `AnonymousMoodCheckInDocument.toObject()`. To avoid conflicts with model names, use the type alias `AnonymousMoodCheckInObject`.
 * ```
 * const anonymousmoodcheckinObject = anonymousmoodcheckin.toObject();
 * ```
 */
export type AnonymousMoodCheckIn = {
  sessionId: string
  mood: number
  note?: string | null
  ipAddress?: string | null
  userAgent?: string | null
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of APIKeyDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `APIKeyDocument.toObject()`. To avoid conflicts with model names, use the type alias `APIKeyObject`.
 * ```
 * const apikeyObject = apikey.toObject();
 * ```
 */
export type APIKey = {
  key: string
  owner: User["_id"] | User
  permissions: ("read" | "write" | "delete" | "admin")[]
  isActive?: boolean
  expiresAt: string
  _id: string
  createdAt?: string
  updatedAt?: string
  status: string
}

/**
 * Lean version of AuditTrailDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `AuditTrailDocument.toObject()`. To avoid conflicts with model names, use the type alias `AuditTrailObject`.
 * ```
 * const audittrailObject = audittrail.toObject();
 * ```
 */
export type AuditTrail = {
  userId?: User["_id"] | User | null
  entityType: "User" | "Goal" | "Task" | "Subscription" | "Payment"
  entityId: string
  action: string
  description?: string
  ipAddress?: string
  userAgent?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of BadgeDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BadgeDocument.toObject()`. To avoid conflicts with model names, use the type alias `BadgeObject`.
 * ```
 * const badgeObject = badge.toObject();
 * ```
 */
export type Badge = {
  user: User["_id"] | User
  badgeType: BadgeType["_id"] | BadgeType
  level?: "Bronze" | "Silver" | "Gold"
  progress?: number
  dateAwarded?: string
  isShowcased?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of BadgeTypeDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BadgeTypeDocument.toObject()`. To avoid conflicts with model names, use the type alias `BadgeTypeObject`.
 * ```
 * const badgetypeObject = badgetype.toObject();
 * ```
 */
export type BadgeType = {
  name: string
  description?: string
  bronzePointsToAward?: number
  silverPointsToAward?: number
  goldPointsToAward?: number
  iconKey?: string
  conditionToMeet: "goal_completed" | "consistency_master" | "point_earner"
  bronzeAmountRequired?: number
  silverAmountRequired?: number
  goldAmountRequired?: number
  expiresAt?: string
  _id: string
  createdAt?: string
  updatedAt?: string
  isExpired: boolean
}

/**
 * Lean version of BlogPostCommentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BlogPostDocument.toObject()`.
 * ```
 * const blogpostObject = blogpost.toObject();
 * ```
 */
export type BlogPostComment = {
  user: User["_id"] | User
  text: string
  createdAt?: string
  _id: string
}

/**
 * Lean version of BlogPostDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BlogPostDocument.toObject()`. To avoid conflicts with model names, use the type alias `BlogPostObject`.
 * ```
 * const blogpostObject = blogpost.toObject();
 * ```
 */
export type BlogPost = {
  title: string
  content: string
  category: string
  imageUrl?: string
  author: User["_id"] | User
  likes: (User["_id"] | User)[]
  comments: BlogPostComment[]
  _id: string
  createdAt?: string
  updatedAt?: string
  likeCount: any
  commentCount: number
}

/**
 * Lean version of BookCommentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BookDocument.toObject()`.
 * ```
 * const bookObject = book.toObject();
 * ```
 */
export type BookComment = {
  user: User["_id"] | User
  text: string
  createdAt?: string
  _id: string
}

/**
 * Lean version of BookDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `BookDocument.toObject()`. To avoid conflicts with model names, use the type alias `BookObject`.
 * ```
 * const bookObject = book.toObject();
 * ```
 */
export type Book = {
  title: string
  author: string
  category: string
  description: string
  coverImage?: string
  addedBy: User["_id"] | User
  likes: (User["_id"] | User)[]
  comments: BookComment[]
  _id: string
  createdAt?: string
  updatedAt?: string
  likeCount: number
  commentCount: number
}

/**
 * Lean version of ChallengeParticipantDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ChallengeDocument.toObject()`.
 * ```
 * const challengeObject = challenge.toObject();
 * ```
 */
export type ChallengeParticipant = {
  user: User["_id"] | User
  progress?: number
  joinedAt?: string
  _id: string
}

/**
 * Lean version of ChallengeDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ChallengeDocument.toObject()`. To avoid conflicts with model names, use the type alias `ChallengeObject`.
 * ```
 * const challengeObject = challenge.toObject();
 * ```
 */
export type Challenge = {
  title: string
  description?: string
  goal: string
  startDate?: string
  endDate: string
  creator: User["_id"] | User
  participants: ChallengeParticipant[]
  rewards: (Reward["_id"] | Reward)[]
  status?: "ongoing" | "completed" | "canceled"
  visibility?: "public" | "private"
  progressTracking?: "individual" | "team" | "both"
  milestones: (Milestone["_id"] | Milestone)[]
  _id: string
  createdAt?: string
  updatedAt?: string
  participantCount: any
  isActive: boolean
}

/**
 * Lean version of ChallengeMilestoneDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ChallengeMilestoneDocument.toObject()`. To avoid conflicts with model names, use the type alias `ChallengeMilestoneObject`.
 * ```
 * const challengemilestoneObject = challengemilestone.toObject();
 * ```
 */
export type ChallengeMilestone = {
  challenge: Challenge["_id"] | Challenge
  title: string
  dueDate: string
  completed?: boolean
  achievedBy: (User["_id"] | User)[]
  _id: string
  createdAt?: string
  updatedAt?: string
  isOverdue: boolean
}

/**
 * Lean version of ChallengeParticipationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ChallengeParticipationDocument.toObject()`. To avoid conflicts with model names, use the type alias `ChallengeParticipationObject`.
 * ```
 * const challengeparticipationObject = challengeparticipation.toObject();
 * ```
 */
export type ChallengeParticipation = {
  user: User["_id"] | User
  challenge: Challenge["_id"] | Challenge
  joinedAt?: string
  progress?: number
  completed?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
  progressPercent: number
}

/**
 * Lean version of ChatUnreadMessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ChatDocument.toObject()`.
 * ```
 * const chatObject = chat.toObject();
 * ```
 */
export type ChatUnreadMessage = {
  userId: User["_id"] | User
  count?: number
  _id: string
}

/**
 * Lean version of ChatDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ChatDocument.toObject()`. To avoid conflicts with model names, use the type alias `ChatObject`.
 * ```
 * const chatObject = chat.toObject();
 * ```
 */
export type Chat = {
  participants: (User["_id"] | User)[]
  messages: (Message["_id"] | Message)[]
  chatType: "private" | "group"
  groupName?: string | null
  chatAvatar?: string | null
  unreadMessages: ChatUnreadMessage[]
  lastMessage?: Message["_id"] | Message
  typingUsers: (User["_id"] | User)[]
  isPinned?: boolean
  admins: (User["_id"] | User)[]
  _id: string
  createdAt?: string
  updatedAt?: string
  participantCount: number
  messageCount: number
}

/**
 * Lean version of CheckInDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `CheckInDocument.toObject()`. To avoid conflicts with model names, use the type alias `CheckInObject`.
 * ```
 * const checkinObject = checkin.toObject();
 * ```
 */
export type CheckIn = {
  user: User["_id"] | User
  createdAt?: string
  _id: string
}

/**
 * Lean version of CollaborationGoalDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `CollaborationGoalDocument.toObject()`. To avoid conflicts with model names, use the type alias `CollaborationGoalObject`.
 * ```
 * const collaborationgoalObject = collaborationgoal.toObject();
 * ```
 */
export type CollaborationGoal = {
  title: string
  description?: string
  status?: "not-started" | "in-progress" | "completed" | "archived"
  progress?: number
  completedAt?: string
  milestones: (Milestone["_id"] | Milestone)[]
  visibility?: "public" | "private"
  createdBy: User["_id"] | User
  participants: (User["_id"] | User)[]
  target: number
  _id: string
  createdAt?: string
  updatedAt?: string
  participantCount: any
  milestoneCount: any
}

/**
 * Lean version of CommentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `CommentDocument.toObject()`. To avoid conflicts with model names, use the type alias `CommentObject`.
 * ```
 * const commentObject = comment.toObject();
 * ```
 */
export type Comment = {
  author: User["_id"] | User
  text: string
  entityType: "BlogPost" | "FeedPost" | "Book" | "Event" | "Message"
  entityId: string
  parentComment?: Comment["_id"] | Comment | null
  likes: (User["_id"] | User)[]
  _id: string
  createdAt?: string
  updatedAt?: string
  likeCount: number
}

/**
 * Lean version of CustomReminderDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `CustomReminderDocument.toObject()`. To avoid conflicts with model names, use the type alias `CustomReminderObject`.
 * ```
 * const customreminderObject = customreminder.toObject();
 * ```
 */
export type CustomReminder = {
  user: User["_id"] | User
  reminderMessage: string
  remindAt: string
  recurrence?: string | null
  disabled?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of EventParticipantDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `EventDocument.toObject()`.
 * ```
 * const eventObject = event.toObject();
 * ```
 */
export type EventParticipant = {
  user: User["_id"] | User
  joinedAt?: string
  status?: "invited" | "accepted" | "declined" | "interested"
}

/**
 * Lean version of EventReminderDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `EventDocument.toObject()`.
 * ```
 * const eventObject = event.toObject();
 * ```
 */
export type EventReminder = {
  message: string
  scheduledTime: string
  sent?: boolean
}

/**
 * Lean version of EventDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `EventDocument.toObject()`. To avoid conflicts with model names, use the type alias `EventObject`.
 * ```
 * const eventObject = event.toObject();
 * ```
 */
export type Event = {
  title: string
  description?: string
  location?: string
  startDate: string
  endDate: string
  createdBy: User["_id"] | User
  participants: EventParticipant[]
  progress?: number
  recurrence?: "none" | "daily" | "weekly" | "monthly" | "yearly"
  status?: "upcoming" | "ongoing" | "completed" | "canceled"
  isPublic?: boolean
  reminders: EventReminder[]
  _id: string
  createdAt?: string
  updatedAt?: string
  participantCount: number
  activeReminderCount: number
}

/**
 * Lean version of FaqDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `FaqDocument.toObject()`. To avoid conflicts with model names, use the type alias `FaqObject`.
 * ```
 * const faqObject = faq.toObject();
 * ```
 */
export type Faq = {
  question: string
  answer: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of FeedbackDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `FeedbackDocument.toObject()`. To avoid conflicts with model names, use the type alias `FeedbackObject`.
 * ```
 * const feedbackObject = feedback.toObject();
 * ```
 */
export type Feedback = {
  userId: User["_id"] | User
  message: string
  type?: "bug" | "feature-request" | "other"
  status?: "pending" | "reviewed" | "resolved"
  priority?: "low" | "medium" | "high"
  isAnonymous?: boolean
  relatedFeature?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of FeedPostCommentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `FeedPostDocument.toObject()`.
 * ```
 * const feedpostObject = feedpost.toObject();
 * ```
 */
export type FeedPostComment = {
  user: User["_id"] | User
  text: string
  createdAt?: string
  _id: string
}

/**
 * Lean version of FeedPostDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `FeedPostDocument.toObject()`. To avoid conflicts with model names, use the type alias `FeedPostObject`.
 * ```
 * const feedpostObject = feedpost.toObject();
 * ```
 */
export type FeedPost = {
  user: User["_id"] | User
  content: string
  likes: (User["_id"] | User)[]
  comments: FeedPostComment[]
  _id: string
  createdAt?: string
  updatedAt?: string
  likeCount: number
  commentCount: number
}

/**
 * Lean version of FollowDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `FollowDocument.toObject()`. To avoid conflicts with model names, use the type alias `FollowObject`.
 * ```
 * const followObject = follow.toObject();
 * ```
 */
export type Follow = {
  follower: User["_id"] | User
  following: User["_id"] | User
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of FriendRequestDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `FriendRequestDocument.toObject()`. To avoid conflicts with model names, use the type alias `FriendRequestObject`.
 * ```
 * const friendrequestObject = friendrequest.toObject();
 * ```
 */
export type FriendRequest = {
  sender: User["_id"] | User
  recipient: User["_id"] | User
  status?: "pending" | "accepted" | "declined" | "rejected"
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of FriendshipDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `FriendshipDocument.toObject()`. To avoid conflicts with model names, use the type alias `FriendshipObject`.
 * ```
 * const friendshipObject = friendship.toObject();
 * ```
 */
export type Friendship = {
  user1: User["_id"] | User
  user2: User["_id"] | User
  _id: string
  createdAt?: string
}

/**
 * Lean version of GoalDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GoalDocument.toObject()`. To avoid conflicts with model names, use the type alias `GoalObject`.
 * ```
 * const goalObject = goal.toObject();
 * ```
 */
export type Goal = {
  title: string
  description?: string
  status?: "not-started" | "in-progress" | "completed" | "archived"
  progress?: number
  completedAt?: string
  milestones: (Milestone["_id"] | Milestone)[]
  visibility?: "public" | "private"
  user: User["_id"] | User
  category: string
  dueDate: string
  tags: string[]
  priority?: "high" | "medium" | "low"
  reminders: (Reminder["_id"] | Reminder)[]
  isPinned?: boolean
  points?: number
  _id: string
  createdAt?: string
  updatedAt?: string
  isActive: boolean
}

/**
 * Lean version of GoalMessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GoalMessageDocument.toObject()`. To avoid conflicts with model names, use the type alias `GoalMessageObject`.
 * ```
 * const goalmessageObject = goalmessage.toObject();
 * ```
 */
export type GoalMessage = {
  goal: Goal["_id"] | Goal
  sender: User["_id"] | User
  message: string
  isDeleted?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of GroupUnreadMessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GroupDocument.toObject()`.
 * ```
 * const groupObject = group.toObject();
 * ```
 */
export type GroupUnreadMessage = {
  userId: User["_id"] | User
  count?: number
}

/**
 * Lean version of GroupDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GroupDocument.toObject()`. To avoid conflicts with model names, use the type alias `GroupObject`.
 * ```
 * const groupObject = group.toObject();
 * ```
 */
export type Group = {
  name: string
  description?: string
  category:
    | "Fitness & Health"
    | "Learning & Education"
    | "Career & Business"
    | "Lifestyle & Hobbies"
    | "Creative & Arts"
    | "Technology"
  members: (User["_id"] | User)[]
  createdBy: User["_id"] | User
  visibility?: "public" | "private"
  isPublic?: boolean
  inviteOnly?: boolean
  isActive?: boolean
  lastActivity?: string
  avatar?: string | null
  tags: string[]
  unreadMessages: GroupUnreadMessage[]
  typingUsers: (User["_id"] | User)[]
  isPinned?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
  memberCount: number
  typingCount: number
}

/**
 * Lean version of GroupInvitationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GroupInvitationDocument.toObject()`. To avoid conflicts with model names, use the type alias `GroupInvitationObject`.
 * ```
 * const groupinvitationObject = groupinvitation.toObject();
 * ```
 */
export type GroupInvitation = {
  groupId: Group["_id"] | Group
  sender: User["_id"] | User
  recipient: User["_id"] | User
  status?: "pending" | "accepted" | "rejected"
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of GroupMessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `GroupMessageDocument.toObject()`. To avoid conflicts with model names, use the type alias `GroupMessageObject`.
 * ```
 * const groupmessageObject = groupmessage.toObject();
 * ```
 */
export type GroupMessage = {
  groupId: Group["_id"] | Group
  senderId: User["_id"] | User
  content: string
  timestamp?: string
  type?: "message" | "system"
  editedAt?: string | null
  deletedAt?: string | null
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of HistoryDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `HistoryDocument.toObject()`. To avoid conflicts with model names, use the type alias `HistoryObject`.
 * ```
 * const historyObject = history.toObject();
 * ```
 */
export type History = {
  entity: string
  action: string
  details?: string
  user?: User["_id"] | User
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of IntegrationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `IntegrationDocument.toObject()`. To avoid conflicts with model names, use the type alias `IntegrationObject`.
 * ```
 * const integrationObject = integration.toObject();
 * ```
 */
export type Integration = {
  user: User["_id"] | User
  type: "webhook" | "api" | "slack" | "google_calendar" | "github" | "custom"
  settings: any
  isActive?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of InvitationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `InvitationDocument.toObject()`. To avoid conflicts with model names, use the type alias `InvitationObject`.
 * ```
 * const invitationObject = invitation.toObject();
 * ```
 */
export type Invitation = {
  groupId: Group["_id"] | Group
  sender: User["_id"] | User
  recipient: User["_id"] | User
  status: "pending" | "accepted" | "rejected"
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of LevelDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `LevelDocument.toObject()`. To avoid conflicts with model names, use the type alias `LevelObject`.
 * ```
 * const levelObject = level.toObject();
 * ```
 */
export type Level = {
  user: User["_id"] | User
  points?: number
  level?: number
  nextLevelAt?: number
  rewards: (Reward["_id"] | Reward)[]
  lastActivity?: string
  _id: string
  createdAt?: string
  updatedAt?: string
  totalRewards: any
}

/**
 * Lean version of MatchDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MatchDocument.toObject()`. To avoid conflicts with model names, use the type alias `MatchObject`.
 * ```
 * const matchObject = match.toObject();
 * ```
 */
export type Match = {
  user1: User["_id"] | User
  user2: User["_id"] | User
  status?: "pending" | "active" | "rejected" | "completed"
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of MessageReactionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MessageDocument.toObject()`.
 * ```
 * const messageObject = message.toObject();
 * ```
 */
export type MessageReaction = {
  userId: User["_id"] | User
  emoji: string
  reactedAt?: string
}

/**
 * Lean version of MessageAttachmentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MessageDocument.toObject()`.
 * ```
 * const messageObject = message.toObject();
 * ```
 */
export type MessageAttachment = {
  url: string
  type: "image" | "video" | "file"
}

/**
 * Lean version of MessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MessageDocument.toObject()`. To avoid conflicts with model names, use the type alias `MessageObject`.
 * ```
 * const messageObject = message.toObject();
 * ```
 */
export type Message = {
  chatId: Chat["_id"] | Chat
  senderId: User["_id"] | User
  receiverId?: User["_id"] | User
  text?: string
  messageType: "private" | "group"
  status?: "sent" | "delivered" | "seen" | "deleted" | "edited"
  reactions: MessageReaction[]
  attachments: MessageAttachment[]
  replyTo?: Message["_id"] | Message
  timestamp?: string
  _id: string
  createdAt?: string
  updatedAt?: string
  reactionCount: number
  attachmentCount: number
}

/**
 * Lean version of MessageReactionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MessageReactionDocument.toObject()`. To avoid conflicts with model names, use the type alias `MessageReactionObject`.
 * ```
 * const messagereactionObject = messagereaction.toObject();
 * ```
 */
export type MessageReaction = {
  messageId: Message["_id"] | Message
  userId: User["_id"] | User
  reaction: "like" | "love" | "haha" | "sad" | "angry" | "wow"
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of MilestoneDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MilestoneDocument.toObject()`. To avoid conflicts with model names, use the type alias `MilestoneObject`.
 * ```
 * const milestoneObject = milestone.toObject();
 * ```
 */
export type Milestone = {
  title: string
  description: string
  dueDate: string
  completed?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of MilitaryMessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MilitaryMessageDocument.toObject()`. To avoid conflicts with model names, use the type alias `MilitaryMessageObject`.
 * ```
 * const militarymessageObject = militarymessage.toObject();
 * ```
 */
export type MilitaryMessage = {
  chatroom: MilitarySupportChatroom["_id"] | MilitarySupportChatroom
  user: User["_id"] | User
  text: string
  timestamp?: string
  isDeleted?: boolean
  attachments: string[]
  _id: string
  createdAt?: string
  updatedAt?: string
  attachmentCount: number
}

/**
 * Lean version of ExternalSupportResourceDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ExternalSupportResourceDocument.toObject()`. To avoid conflicts with model names, use the type alias `ExternalSupportResourceObject`.
 * ```
 * const externalsupportresourceObject = externalsupportresource.toObject();
 * ```
 */
export type ExternalSupportResource = {
  title: string
  url: string
  description?: string
  category?: "hotline" | "website" | "forum" | "organization" | "other"
  isActive?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
  domain: string
}

/**
 * Lean version of MilitaryUserMessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MilitaryUserDocument.toObject()`.
 * ```
 * const militaryuserObject = militaryuser.toObject();
 * ```
 */
export type MilitaryUserMessage = {
  sender: User["_id"] | User
  content: string
  timestamp?: string
  _id: string
}

/**
 * Lean version of MilitaryUserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MilitaryUserDocument.toObject()`. To avoid conflicts with model names, use the type alias `MilitaryUserObject`.
 * ```
 * const militaryuserObject = militaryuser.toObject();
 * ```
 */
export type MilitaryUser = {
  userId: User["_id"] | User
  isMilitary?: boolean
  messages: MilitaryUserMessage[]
  _id: string
  createdAt?: string
  updatedAt?: string
  messageCount: number
}

/**
 * Lean version of MilitarySupportChatroomDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `MilitarySupportChatroomDocument.toObject()`. To avoid conflicts with model names, use the type alias `MilitarySupportChatroomObject`.
 * ```
 * const militarysupportchatroomObject = militarysupportchatroom.toObject();
 * ```
 */
export type MilitarySupportChatroom = {
  name: string
  description?: string
  members: (User["_id"] | User)[]
  visibility?: "public" | "private"
  isActive?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
  memberCount: number
}

/**
 * Lean version of NewsletterDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `NewsletterDocument.toObject()`. To avoid conflicts with model names, use the type alias `NewsletterObject`.
 * ```
 * const newsletterObject = newsletter.toObject();
 * ```
 */
export type Newsletter = {
  email: string
  subscribedAt?: string
  status?: "subscribed" | "unsubscribed"
  unsubscribeToken: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of NotificationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `NotificationDocument.toObject()`. To avoid conflicts with model names, use the type alias `NotificationObject`.
 * ```
 * const notificationObject = notification.toObject();
 * ```
 */
export type Notification = {
  user: User["_id"] | User
  sender?: User["_id"] | User | null
  message: string
  type:
    | "friend_request"
    | "message"
    | "group_invite"
    | "blog_activity"
    | "goal_milestone"
  read?: boolean
  link?: string
  expiresAt?: string
  _id: string
  createdAt?: string
  updatedAt?: string
  isExpired: boolean
}

/**
 * Lean version of PaymentDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PaymentDocument.toObject()`. To avoid conflicts with model names, use the type alias `PaymentObject`.
 * ```
 * const paymentObject = payment.toObject();
 * ```
 */
export type Payment = {
  userId: User["_id"] | User
  paymentId: string
  amount: number
  currency: string
  status?: "pending" | "completed" | "failed" | "refunded"
  method: "card" | "paypal" | "bank_transfer"
  description?: string
  receiptUrl?: string
  paymentDate?: string
  expiresAt?: string
  _id: string
  createdAt?: string
  updatedAt?: string
  isExpired: boolean
}

/**
 * Lean version of PaymentTransactionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PaymentTransactionDocument.toObject()`. To avoid conflicts with model names, use the type alias `PaymentTransactionObject`.
 * ```
 * const paymenttransactionObject = paymenttransaction.toObject();
 * ```
 */
export type PaymentTransaction = {
  userId: User["_id"] | User
  transactionId: string
  paymentMethod: "card" | "paypal" | "bank_transfer" | "crypto"
  amount: number
  currency: string
  status?: "initiated" | "processing" | "completed" | "failed" | "refunded"
  description?: string
  initiatedAt?: string
  completedAt?: string
  paymentGatewayResponse?: any | null
  isRefundable?: boolean
  refundReason?: string
  _id: string
  createdAt?: string
  updatedAt?: string
  isCompleted: boolean
}

/**
 * Lean version of PointRedemptionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PointDocument.toObject()`.
 * ```
 * const pointObject = point.toObject();
 * ```
 */
export type PointRedemption = {
  reward: string
  pointsSpent: number
  redemptionDate?: string
  _id: string
}

/**
 * Lean version of PointDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PointDocument.toObject()`. To avoid conflicts with model names, use the type alias `PointObject`.
 * ```
 * const pointObject = point.toObject();
 * ```
 */
export type Point = {
  user: User["_id"] | User
  points?: number
  redemptions: PointRedemption[]
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of PollOptionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PollDocument.toObject()`.
 * ```
 * const pollObject = poll.toObject();
 * ```
 */
export type PollOption = {
  option: string
  votes: (User["_id"] | User)[]
  _id: string
}

/**
 * Lean version of PollDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PollDocument.toObject()`. To avoid conflicts with model names, use the type alias `PollObject`.
 * ```
 * const pollObject = poll.toObject();
 * ```
 */
export type Poll = {
  groupId: Group["_id"] | Group
  question: string
  options: PollOption[]
  expirationDate: string
  status?: "active" | "expired"
  _id: string
  createdAt?: string
  updatedAt?: string
  isExpired: boolean
  totalVotes: number
}

/**
 * Lean version of PollResultDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PollResultDocument.toObject()`. To avoid conflicts with model names, use the type alias `PollResultObject`.
 * ```
 * const pollresultObject = pollresult.toObject();
 * ```
 */
export type PollResult = {
  pollId: Poll["_id"] | Poll
  optionId: Poll["_id"] | Poll
  votesCount?: number
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of PostDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PostDocument.toObject()`. To avoid conflicts with model names, use the type alias `PostObject`.
 * ```
 * const postObject = post.toObject();
 * ```
 */
export type Post = {
  user: User["_id"] | User
  content: string
  likes: (User["_id"] | User)[]
  comments: (Comment["_id"] | Comment)[]
  isDeleted?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
  likeCount: number
  commentCount: number
}

/**
 * Lean version of PrivateMessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `PrivateMessageDocument.toObject()`. To avoid conflicts with model names, use the type alias `PrivateMessageObject`.
 * ```
 * const privatemessageObject = privatemessage.toObject();
 * ```
 */
export type PrivateMessage = {
  sender: User["_id"] | User
  receiver: User["_id"] | User
  content: string
  isRead?: boolean
  isDeleted?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
  isUnread: boolean
}

/**
 * Lean version of ProfileDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ProfileDocument.toObject()`. To avoid conflicts with model names, use the type alias `ProfileObject`.
 * ```
 * const profileObject = profile.toObject();
 * ```
 */
export type Profile = {
  user: User["_id"] | User
  name: string
  email: string
  bio?: string
  profileImage?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of RedemptionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RedemptionDocument.toObject()`. To avoid conflicts with model names, use the type alias `RedemptionObject`.
 * ```
 * const redemptionObject = redemption.toObject();
 * ```
 */
export type Redemption = {
  user: User["_id"] | User
  pointsUsed: number
  item: string
  redemptionDate?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of RefreshTokenDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RefreshTokenDocument.toObject()`. To avoid conflicts with model names, use the type alias `RefreshTokenObject`.
 * ```
 * const refreshtokenObject = refreshtoken.toObject();
 * ```
 */
export type RefreshToken = {
  user: User["_id"] | User
  token: string
  expiresAt: string
  revoked?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
  isExpired: boolean
  isActive: boolean
}

/**
 * Lean version of ReminderDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ReminderDocument.toObject()`. To avoid conflicts with model names, use the type alias `ReminderObject`.
 * ```
 * const reminderObject = reminder.toObject();
 * ```
 */
export type Reminder = {
  user: User["_id"] | User
  message: string
  goal?: Goal["_id"] | Goal
  remindAt: string
  recurrence?: "none" | "daily" | "weekly" | "monthly"
  isActive?: boolean
  isSent?: boolean
  reminderType?: "email" | "sms" | "app"
  email?: string
  lastSent?: string
  endRepeat?: string
  _id: string
  createdAt?: string
  updatedAt?: string
  isRecurring: boolean
}

/**
 * Lean version of ReportDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ReportDocument.toObject()`. To avoid conflicts with model names, use the type alias `ReportObject`.
 * ```
 * const reportObject = report.toObject();
 * ```
 */
export type Report = {
  userId: User["_id"] | User
  reportedId: string
  reportType: "post" | "comment" | "user"
  reason: string
  status?: "pending" | "resolved"
  resolvedBy?: User["_id"] | User
  resolvedAt?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of ReviewDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ReviewDocument.toObject()`. To avoid conflicts with model names, use the type alias `ReviewObject`.
 * ```
 * const reviewObject = review.toObject();
 * ```
 */
export type Review = {
  user: User["_id"] | User
  reviewedUser: User["_id"] | User
  rating: number
  comment?: string
  isAnonymous?: boolean
  flagged?: boolean
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of RewardDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RewardDocument.toObject()`. To avoid conflicts with model names, use the type alias `RewardObject`.
 * ```
 * const rewardObject = reward.toObject();
 * ```
 */
export type Reward = {
  name: string
  description: string
  pointsRequired: number
  rewardType: "badge" | "discount" | "giftCard" | "recognition"
  imageUrl?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of RoleDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RoleDocument.toObject()`. To avoid conflicts with model names, use the type alias `RoleObject`.
 * ```
 * const roleObject = role.toObject();
 * ```
 */
export type Role = {
  roleName: string
  permissions: string[]
  description?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of RoomDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RoomDocument.toObject()`. To avoid conflicts with model names, use the type alias `RoomObject`.
 * ```
 * const roomObject = room.toObject();
 * ```
 */
export type Room = {
  name: string
  description?: string
  isPrivate?: boolean
  createdBy: User["_id"] | User
  members: (User["_id"] | User)[]
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of SessionDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `SessionDocument.toObject()`. To avoid conflicts with model names, use the type alias `SessionObject`.
 * ```
 * const sessionObject = session.toObject();
 * ```
 */
export type Session = {
  user: User["_id"] | User
  token: string
  ipAddress?: string
  device?: string
  userAgent?: string
  isActive?: boolean
  expiresAt: string
  _id: string
  createdAt?: string
  updatedAt?: string
  isExpired: boolean
}

/**
 * Lean version of StatisticsDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `StatisticsDocument.toObject()`. To avoid conflicts with model names, use the type alias `StatisticsObject`.
 * ```
 * const statisticsObject = statistics.toObject();
 * ```
 */
export type Statistics = {
  user: User["_id"] | User
  goalsCompleted?: number
  currentStreak?: number
  longestStreak?: number
  totalPoints?: number
  weeklyActivity?: Map<string, number>
  lastUpdated?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of StreakDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `StreakDocument.toObject()`. To avoid conflicts with model names, use the type alias `StreakObject`.
 * ```
 * const streakObject = streak.toObject();
 * ```
 */
export type Streak = {
  user: User["_id"] | User
  streakCount?: number
  lastCheckIn?: string | null
  longestStreak?: number
  checkInDates: string[]
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of SupportTicketMessageDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `SupportTicketDocument.toObject()`.
 * ```
 * const supportticketObject = supportticket.toObject();
 * ```
 */
export type SupportTicketMessage = {
  sender: string
  content: string
  timestamp?: string
}

/**
 * Lean version of SupportTicketDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `SupportTicketDocument.toObject()`. To avoid conflicts with model names, use the type alias `SupportTicketObject`.
 * ```
 * const supportticketObject = supportticket.toObject();
 * ```
 */
export type SupportTicket = {
  name: string
  email: string
  subject: string
  message: string
  priority?: "low" | "normal" | "high"
  status?: "open" | "pending" | "closed"
  messages: SupportTicketMessage[]
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of TaskDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `TaskDocument.toObject()`. To avoid conflicts with model names, use the type alias `TaskObject`.
 * ```
 * const taskObject = task.toObject();
 * ```
 */
export type Task = {
  user: User["_id"] | User
  title: string
  description?: string
  status?: "not-started" | "in-progress" | "completed" | "archived"
  dueDate?: string
  completedAt?: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of TrackerDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `TrackerDocument.toObject()`. To avoid conflicts with model names, use the type alias `TrackerObject`.
 * ```
 * const trackerObject = tracker.toObject();
 * ```
 */
export type Tracker = {
  user: User["_id"] | User
  name: string
  progress: number
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of UserDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserObject`.
 * ```
 * const userObject = user.toObject();
 * ```
 */
export type User = {
  username: string
  email: string
  password: string
  bio?: string
  profileImage?: string
  coverImage?: string
  name?: string
  role?: "user" | "admin" | "moderator" | "military"
  isVerified?: boolean
  permissions: string[]
  isLocked?: boolean
  active?: boolean
  friends: (User["_id"] | User)[]
  friendRequests: (User["_id"] | User)[]
  followers: (User["_id"] | User)[]
  following: (User["_id"] | User)[]
  rewards: (Reward["_id"] | Reward)[]
  achievements: (Achievement["_id"] | Achievement)[]
  badges: (Badge["_id"] | Badge)[]
  pinnedGoals: (Goal["_id"] | Goal)[]
  featuredAchievements: (Achievement["_id"] | Achievement)[]
  location: {
    country?: string
    state?: string
    city?: string
    timezone?: string
    coordinates: {
      latitude?: number
      longitude?: number
    }
  }
  stripeCustomerId?: string
  stripeSubscriptionId?: string
  subscription_status?: "trial" | "active" | "expired" | "canceled" | "past_due"
  subscriptionTier?: "free-trial" | "basic" | "pro" | "elite"
  trial_start_date?: string
  trial_end_date?: string
  subscriptionStartDate?: string
  subscriptionEndDate?: string
  next_billing_date?: string
  billing_cycle?: "monthly" | "yearly"
  interests: string[]
  chatPreferences: {
    preferredGroups: (Chat["_id"] | Chat)[]
    directMessagesOnly?: boolean
  }
  activeStatus?: "online" | "offline"
  settings: {
    notifications: {
      email?: boolean
      sms?: boolean
    }
    privacy: {
      profileVisibility?: "public" | "friends" | "private"
    }
  }
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of UserProgressLogDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `UserProgressLogDocument.toObject()`. To avoid conflicts with model names, use the type alias `UserProgressLogObject`.
 * ```
 * const userprogresslogObject = userprogresslog.toObject();
 * ```
 */
export type UserProgressLog = {
  user: User["_id"] | User
  targetType: "goal" | "task" | "tracker"
  targetId: string
  before: number
  after: number
  note?: string
  _id: string
  createdAt?: string
}

/**
 * Lean version of VerificationTokenDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `VerificationTokenDocument.toObject()`. To avoid conflicts with model names, use the type alias `VerificationTokenObject`.
 * ```
 * const verificationtokenObject = verificationtoken.toObject();
 * ```
 */
export type VerificationToken = {
  user: User["_id"] | User
  token: string
  expiresAt: string
  _id: string
  createdAt?: string
  updatedAt?: string
}

/**
 * Lean version of XpHistoryDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `XpHistoryDocument.toObject()`. To avoid conflicts with model names, use the type alias `XpHistoryObject`.
 * ```
 * const xphistoryObject = xphistory.toObject();
 * ```
 */
export type XpHistory = {
  userId: User["_id"] | User
  xp: number
  date: string
  reason: string
  _id: string
  createdAt?: string
  updatedAt?: string
}
